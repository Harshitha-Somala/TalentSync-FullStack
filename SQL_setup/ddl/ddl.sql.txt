-- Create a table for companies
CREATE TABLE talentsync.company (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    industry VARCHAR(50),
    location VARCHAR(50),
    description TEXT,
    founded_at DATE,
    website VARCHAR(100),
    contact_email VARCHAR(100) NOT NULL,
    UNIQUE (name)
);


-- Create a table for job listings
CREATE TABLE talentsync.job (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    company_id INT NOT NULL,  -- Foreign key referencing company table
    location VARCHAR(50) NOT NULL,
    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    salary NUMERIC,
    job_type VARCHAR(20),
    is_active BOOL DEFAULT TRUE,
    CONSTRAINT valid_job_type CHECK (job_type IN ('full-time', 'part-time', 'contract')),
    FOREIGN KEY (company_id) REFERENCES talentsync.company(id) ON DELETE CASCADE
);



-- Create a table for users
CREATE TABLE talentsync.user (
    user_id SERIAL PRIMARY KEY,
    is_job_seeker BOOL DEFAULT TRUE, -- False means employer who posted job
    name VARCHAR(100) NOT NULL,
 username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,  -- Use a secure password hashing mechanism,
    position VARCHAR(50),
    email VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20),
    hire_start_date DATE
);

-- Create a table for feedback
CREATE TABLE talentsync.feedback (
    id SERIAL PRIMARY KEY,
    feedback_type VARCHAR(20) NOT NULL,
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    job_id INT,  -- Relationship with job table
    FOREIGN KEY (job_id) REFERENCES talentsync.job(id) ON DELETE CASCADE
);

-- Create a table for job applications
CREATE TABLE talentsync.job_application (
    id SERIAL PRIMARY KEY,
    job_id INT NOT NULL,  -- Reference to the job table
    user_id VARCHAR(100) NOT NULL,
    application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resume_file_path VARCHAR(255),
    cover_letter TEXT,
    status VARCHAR(20) DEFAULT 'pending',  -- Status: pending, accepted, rejected, etc.
    FOREIGN KEY (job_id) REFERENCES talentsync.job(id) ON DELETE CASCADE
);


-- Create a table for employers
CREATE TABLE talentsync.employer (
    id SERIAL PRIMARY KEY,
    company_id INT NOT NULL,  -- Reference to the company table
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,  -- Use a secure password hashing mechanism
    email VARCHAR(100) NOT NULL,
    full_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    FOREIGN KEY (company_id) REFERENCES talentsync.company(id) ON DELETE CASCADE
);

-- Alter feedback table with rating, user_id and employer_id columns
Alter table talentsync.feedback add column rating numeric;
  Alter table talentsync.feedback add CONSTRAINT rating_max_limit CHECK (rating <= 5)


ALTER TABLE talentsync.feedback ADD COLUMN user_id INT NULL
CONSTRAINT feed_user_id_fk_c REFERENCES talentsync.user(user_id)   
ON UPDATE CASCADE ON DELETE CASCADE; 


ALTER TABLE talentsync.feedback ADD COLUMN employer_id INT NULL
CONSTRAINT feed_employer_id_fk_c REFERENCES talentsync.employer(id)   
ON UPDATE CASCADE ON DELETE CASCADE;
